name: Build and Release

on:
  push:
    branches: [ release ]
    tags:
      - 'v*'
  pull_request:
    branches: [ release ]

permissions:
  contents: write
  actions: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/tags/v'))
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate version number
      id: get_version
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/release" ]]; then
          # Get the latest tag to determine next version
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*.*.*" | sort -V | tail -1)
          
          if [[ -z "$LATEST_TAG" ]]; then
            # No tags exist, start with v1.0.0
            VERSION="v1.0.0"
          else
            # Extract version numbers
            LATEST_TAG=${LATEST_TAG#v}  # Remove 'v' prefix
            IFS='.' read -ra VERSION_PARTS <<< "$LATEST_TAG"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            # Check commit message for version bump hints
            COMMIT_MSG=$(git log -1 --pretty=format:"%s %b")
            
            if echo "$COMMIT_MSG" | grep -i -E "(breaking|major)" > /dev/null; then
              # Major version bump
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif echo "$COMMIT_MSG" | grep -i -E "(feature|minor|feat)" > /dev/null; then
              # Minor version bump
              MINOR=$((MINOR + 1))
              PATCH=0
            else
              # Default to patch version bump
              PATCH=$((PATCH + 1))
            fi
            
            VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "IS_AUTO_RELEASE=true" >> $GITHUB_OUTPUT
        else
          # Use existing tag
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "IS_AUTO_RELEASE=false" >> $GITHUB_OUTPUT
        fi
        echo "Generated version: ${VERSION}"
    
    - name: Create tag
      if: steps.get_version.outputs.IS_AUTO_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Delete existing release and tag if they exist
        gh release delete "$VERSION" --yes 2>/dev/null || true
        git tag -d "$VERSION" 2>/dev/null || true
        git push origin ":refs/tags/$VERSION" 2>/dev/null || true
        
        # Create new tag
        git tag -a "$VERSION" -m "Auto-release $VERSION - $COMMIT_MSG"
        git push origin "$VERSION"
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: ID Card Maker ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## ðŸ†• ID Card Maker Release ${{ steps.get_version.outputs.VERSION }}
          
          Professional bulk ID card printing solution with improved UI and features.
          
          ### ðŸŽ¯ Features:
          - **Smart Card Detection**: Automatic ID card boundary detection
          - **Manual Crop Editor**: Precise manual cropping with auto-detection
          - **Professional Layout**: Optimized card placement on A4 pages
          - **Cutting Guides**: Configurable crop marks for precise cutting
          - **Dual-sided Support**: Front and back card printing with duplex support
          - **Multiple Formats**: Support for various image formats (JPEG, PNG, TIFF, etc.)
          
          ### ðŸ“¦ Downloads:
          - **Windows**: `ID-Card-Maker.exe` - Standalone executable for Windows
          - **macOS**: `id-card-maker-macos.zip` - Application bundle for macOS
          - **Linux**: `id-card-maker-linux.tar.gz` - Executable for Linux distributions
          
          ### ðŸš€ Quick Start:
          1. Download the appropriate file for your operating system
          2. Extract (if needed) and run the application
          3. Load your ID card images using the Browse buttons
          4. Adjust settings as needed (card dimensions, spacing, etc.)
          5. Click "Generate PDF Files" to create print-ready PDFs
          
          ### ðŸ’¡ Tips:
          - Use the crop editor for precise card boundary selection
          - Enable crop marks for easier cutting
          - For duplex printing, enable "Rotate back images 180Â°"
          
          ---
          
          **System Requirements:**
          - Windows 10/11, macOS 10.14+, or modern Linux distribution
          - No Python installation required - fully self-contained executables
        draft: false
        prerelease: false

  build-windows:
    runs-on: windows-latest
    needs: [create-release]
    if: always() && (github.event_name == 'push' && (contains(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/release'))
    steps:
    - uses: actions/checkout@v4
    
    - name: Debug - List files
      shell: cmd
      run: |
        echo Current directory contents:
        dir
        echo Checking for LICENSE file:
        if exist LICENSE (echo LICENSE found) else (echo LICENSE not found)
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Verify icon exists
      run: |
        if (Test-Path "icon.ico") {
            Write-Host "Icon found: icon.ico"
        } else {
            Write-Host "Creating default icon..."
            python -c "
        from PIL import Image, ImageDraw
        import os
        
        size = (64, 64)
        img = Image.new('RGBA', size, (70, 130, 180, 255))
        draw = ImageDraw.Draw(img)
        margin = 8
        draw.rectangle([margin, margin, size[0]-margin, size[1]-margin], 
                     fill=(255, 255, 255, 255), outline=(0, 0, 0, 255), width=2)
        for i in range(3):
            y = margin + 15 + i * 8
            draw.rectangle([margin + 5, y, size[0] - margin - 5, y + 2], 
                         fill=(100, 100, 100, 255))
        img.save('icon.ico', format='ICO', sizes=[(32, 32), (64, 64)])
        print('Created default icon')
            "
            Write-Host "Default icon created"
        }
    
    - name: Build Windows executable
      shell: cmd
      run: |
        pyinstaller --clean --onefile --windowed --name "ID-Card-Maker" ^
          --icon=icon.ico ^
          --add-data "README.md;." ^
          --hidden-import=PIL._tkinter_finder ^
          --hidden-import=ttkbootstrap ^
          --collect-all ttkbootstrap ^
          id_card_maker.py
    
    - name: Create Windows package
      shell: cmd
      run: |
        mkdir package
        copy dist\ID-Card-Maker.exe package\
        copy README.md package\
        if exist LICENSE (
          copy LICENSE package\
        ) else (
          echo LICENSE file not found, creating default...
          echo MIT License > package\LICENSE
        )
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: id-card-maker-windows
        path: package/
    
    - name: Upload Windows Release Asset
      if: needs.create-release.result == 'success'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./dist/ID-Card-Maker.exe
        asset_name: ID-Card-Maker.exe
        asset_content_type: application/octet-stream

  build-macos:
    runs-on: macos-latest
    needs: [create-release]
    if: always() && (github.event_name == 'push' && (contains(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/release'))
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build macOS executable
      run: |
        pyinstaller --clean --onefile --windowed --name "ID-Card-Maker" \
          --add-data "README.md:." \
          --hidden-import=PIL._tkinter_finder \
          --hidden-import=ttkbootstrap \
          --collect-all ttkbootstrap \
          id_card_maker.py
    
    - name: Create macOS app bundle
      run: |
        mkdir -p "ID Card Maker.app/Contents/MacOS"
        mkdir -p "ID Card Maker.app/Contents/Resources"
        cp dist/ID-Card-Maker "ID Card Maker.app/Contents/MacOS/"
        cp README.md "ID Card Maker.app/Contents/Resources/"
        if [ -f LICENSE ]; then
          cp LICENSE "ID Card Maker.app/Contents/Resources/"
        else
          echo "MIT License" > "ID Card Maker.app/Contents/Resources/LICENSE"
        fi
        
        cat > "ID Card Maker.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>CFBundleExecutable</key>
          <string>ID-Card-Maker</string>
          <key>CFBundleIdentifier</key>
          <string>com.idcardmaker.app</string>
          <key>CFBundleName</key>
          <string>ID Card Maker</string>
          <key>CFBundleVersion</key>
          <string>1.0</string>
          <key>CFBundleShortVersionString</key>
          <string>1.0</string>
          <key>CFBundlePackageType</key>
          <string>APPL</string>
        </dict>
        </plist>
        EOF
    
    - name: Create macOS package
      run: |
        zip -r id-card-maker-macos.zip "ID Card Maker.app"
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: id-card-maker-macos
        path: id-card-maker-macos.zip
    
    - name: Upload macOS Release Asset
      if: needs.create-release.result == 'success'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./id-card-maker-macos.zip
        asset_name: id-card-maker-macos.zip
        asset_content_type: application/zip

  build-linux:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always() && (github.event_name == 'push' && (contains(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/release'))
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build Linux executable
      run: |
        pyinstaller --clean --onefile --name "id-card-maker" \
          --add-data "README.md:." \
          --hidden-import=PIL._tkinter_finder \
          --hidden-import=ttkbootstrap \
          --collect-all ttkbootstrap \
          id_card_maker.py
    
    - name: Create Linux package
      run: |
        mkdir package
        cp dist/id-card-maker package/
        cp README.md package/
        if [ -f LICENSE ]; then
          cp LICENSE package/
        else
          echo "MIT License" > package/LICENSE
        fi
        
        # Create a simple run script
        cat > package/run.sh << 'EOF'
        #!/bin/bash
        cd "$(dirname "$0")"
        ./id-card-maker
        EOF
        chmod +x package/run.sh
        chmod +x package/id-card-maker
        
        tar -czf id-card-maker-linux.tar.gz -C package .
    
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: id-card-maker-linux
        path: id-card-maker-linux.tar.gz
    
    - name: Upload Linux Release Asset
      if: needs.create-release.result == 'success'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./id-card-maker-linux.tar.gz
        asset_name: id-card-maker-linux.tar.gz
        asset_content_type: application/gzip